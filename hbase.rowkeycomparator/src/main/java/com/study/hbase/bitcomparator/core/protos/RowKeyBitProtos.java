// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RowKeyBitProtos.proto

package com.study.hbase.bitcomparator.core.protos;

public final class RowKeyBitProtos {
    private RowKeyBitProtos() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    public interface RowKeyBitComparatorOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required fixed32 md5urlhash = 1;

        /**
         * <code>required fixed32 md5urlhash = 1;</code>
         */
        boolean hasMd5Urlhash();

        /**
         * <code>required fixed32 md5urlhash = 1;</code>
         */
        int getMd5Urlhash();

        // required fixed32 sitecodehash = 2;

        /**
         * <code>required fixed32 sitecodehash = 2;</code>
         */
        boolean hasSitecodehash();

        /**
         * <code>required fixed32 sitecodehash = 2;</code>
         */
        int getSitecodehash();

        // required fixed32 status = 3;

        /**
         * <code>required fixed32 status = 3;</code>
         */
        boolean hasStatus();

        /**
         * <code>required fixed32 status = 3;</code>
         */
        int getStatus();

        // required fixed32 code = 4;

        /**
         * <code>required fixed32 code = 4;</code>
         */
        boolean hasCode();

        /**
         * <code>required fixed32 code = 4;</code>
         */
        int getCode();

        // required fixed32 sdate = 5;

        /**
         * <code>required fixed32 sdate = 5;</code>
         */
        boolean hasSdate();

        /**
         * <code>required fixed32 sdate = 5;</code>
         */
        int getSdate();

        // required fixed32 type = 6;

        /**
         * <code>required fixed32 type = 6;</code>
         */
        boolean hasType();

        /**
         * <code>required fixed32 type = 6;</code>
         */
        int getType();

        // required fixed32 free = 7;

        /**
         * <code>required fixed32 free = 7;</code>
         */
        boolean hasFree();

        /**
         * <code>required fixed32 free = 7;</code>
         */
        int getFree();

        // required fixed32 close = 8;

        /**
         * <code>required fixed32 close = 8;</code>
         */
        boolean hasClose();

        /**
         * <code>required fixed32 close = 8;</code>
         */
        int getClose();

        // required fixed32 queue = 9;

        /**
         * <code>required fixed32 queue = 9;</code>
         */
        boolean hasQueue();

        /**
         * <code>required fixed32 queue = 9;</code>
         */
        int getQueue();

        // required fixed32 scantype = 10;

        /**
         * <code>required fixed32 scantype = 10;</code>
         */
        boolean hasScantype();

        /**
         * <code>required fixed32 scantype = 10;</code>
         */
        int getScantype();
    }

    /**
     * Protobuf type {@code RowKeyBitComparator}
     */
    public static final class RowKeyBitComparator extends
            com.google.protobuf.GeneratedMessage
            implements RowKeyBitComparatorOrBuilder {
        // Use RowKeyBitComparator.newBuilder() to construct.
        private RowKeyBitComparator(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private RowKeyBitComparator(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final RowKeyBitComparator defaultInstance;

        public static RowKeyBitComparator getDefaultInstance() {
            return defaultInstance;
        }

        public RowKeyBitComparator getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private RowKeyBitComparator(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 13: {
                            bitField0_ |= 0x00000001;
                            md5Urlhash_ = input.readFixed32();
                            break;
                        }
                        case 21: {
                            bitField0_ |= 0x00000002;
                            sitecodehash_ = input.readFixed32();
                            break;
                        }
                        case 29: {
                            bitField0_ |= 0x00000004;
                            status_ = input.readFixed32();
                            break;
                        }
                        case 37: {
                            bitField0_ |= 0x00000008;
                            code_ = input.readFixed32();
                            break;
                        }
                        case 45: {
                            bitField0_ |= 0x00000010;
                            sdate_ = input.readFixed32();
                            break;
                        }
                        case 53: {
                            bitField0_ |= 0x00000020;
                            type_ = input.readFixed32();
                            break;
                        }
                        case 61: {
                            bitField0_ |= 0x00000040;
                            free_ = input.readFixed32();
                            break;
                        }
                        case 69: {
                            bitField0_ |= 0x00000080;
                            close_ = input.readFixed32();
                            break;
                        }
                        case 77: {
                            bitField0_ |= 0x00000100;
                            queue_ = input.readFixed32();
                            break;
                        }
                        case 85: {
                            bitField0_ |= 0x00000200;
                            scantype_ = input.readFixed32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.internal_static_RowKeyBitComparator_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.internal_static_RowKeyBitComparator_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.class, com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.Builder.class);
        }

        public static com.google.protobuf.Parser<RowKeyBitComparator> PARSER =
                new com.google.protobuf.AbstractParser<RowKeyBitComparator>() {
                    public RowKeyBitComparator parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new RowKeyBitComparator(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<RowKeyBitComparator> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required fixed32 md5urlhash = 1;
        public static final int MD5URLHASH_FIELD_NUMBER = 1;
        private int md5Urlhash_;

        /**
         * <code>required fixed32 md5urlhash = 1;</code>
         */
        public boolean hasMd5Urlhash() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required fixed32 md5urlhash = 1;</code>
         */
        public int getMd5Urlhash() {
            return md5Urlhash_;
        }

        // required fixed32 sitecodehash = 2;
        public static final int SITECODEHASH_FIELD_NUMBER = 2;
        private int sitecodehash_;

        /**
         * <code>required fixed32 sitecodehash = 2;</code>
         */
        public boolean hasSitecodehash() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required fixed32 sitecodehash = 2;</code>
         */
        public int getSitecodehash() {
            return sitecodehash_;
        }

        // required fixed32 status = 3;
        public static final int STATUS_FIELD_NUMBER = 3;
        private int status_;

        /**
         * <code>required fixed32 status = 3;</code>
         */
        public boolean hasStatus() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required fixed32 status = 3;</code>
         */
        public int getStatus() {
            return status_;
        }

        // required fixed32 code = 4;
        public static final int CODE_FIELD_NUMBER = 4;
        private int code_;

        /**
         * <code>required fixed32 code = 4;</code>
         */
        public boolean hasCode() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required fixed32 code = 4;</code>
         */
        public int getCode() {
            return code_;
        }

        // required fixed32 sdate = 5;
        public static final int SDATE_FIELD_NUMBER = 5;
        private int sdate_;

        /**
         * <code>required fixed32 sdate = 5;</code>
         */
        public boolean hasSdate() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required fixed32 sdate = 5;</code>
         */
        public int getSdate() {
            return sdate_;
        }

        // required fixed32 type = 6;
        public static final int TYPE_FIELD_NUMBER = 6;
        private int type_;

        /**
         * <code>required fixed32 type = 6;</code>
         */
        public boolean hasType() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>required fixed32 type = 6;</code>
         */
        public int getType() {
            return type_;
        }

        // required fixed32 free = 7;
        public static final int FREE_FIELD_NUMBER = 7;
        private int free_;

        /**
         * <code>required fixed32 free = 7;</code>
         */
        public boolean hasFree() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>required fixed32 free = 7;</code>
         */
        public int getFree() {
            return free_;
        }

        // required fixed32 close = 8;
        public static final int CLOSE_FIELD_NUMBER = 8;
        private int close_;

        /**
         * <code>required fixed32 close = 8;</code>
         */
        public boolean hasClose() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>required fixed32 close = 8;</code>
         */
        public int getClose() {
            return close_;
        }

        // required fixed32 queue = 9;
        public static final int QUEUE_FIELD_NUMBER = 9;
        private int queue_;

        /**
         * <code>required fixed32 queue = 9;</code>
         */
        public boolean hasQueue() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>required fixed32 queue = 9;</code>
         */
        public int getQueue() {
            return queue_;
        }

        // required fixed32 scantype = 10;
        public static final int SCANTYPE_FIELD_NUMBER = 10;
        private int scantype_;

        /**
         * <code>required fixed32 scantype = 10;</code>
         */
        public boolean hasScantype() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>required fixed32 scantype = 10;</code>
         */
        public int getScantype() {
            return scantype_;
        }

        private void initFields() {
            md5Urlhash_ = 0;
            sitecodehash_ = 0;
            status_ = 0;
            code_ = 0;
            sdate_ = 0;
            type_ = 0;
            free_ = 0;
            close_ = 0;
            queue_ = 0;
            scantype_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasMd5Urlhash()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSitecodehash()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStatus()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCode()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSdate()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasFree()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasClose()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasQueue()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasScantype()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeFixed32(1, md5Urlhash_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeFixed32(2, sitecodehash_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeFixed32(3, status_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeFixed32(4, code_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeFixed32(5, sdate_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeFixed32(6, type_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeFixed32(7, free_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeFixed32(8, close_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeFixed32(9, queue_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeFixed32(10, scantype_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(1, md5Urlhash_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(2, sitecodehash_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(3, status_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(4, code_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(5, sdate_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(6, type_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(7, free_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(8, close_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(9, queue_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(10, scantype_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator)) {
                return super.equals(obj);
            }
            com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator other = (com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator) obj;

            boolean result = true;
            result = result && (hasMd5Urlhash() == other.hasMd5Urlhash());
            if (hasMd5Urlhash()) {
                result = result && (getMd5Urlhash()
                        == other.getMd5Urlhash());
            }
            result = result && (hasSitecodehash() == other.hasSitecodehash());
            if (hasSitecodehash()) {
                result = result && (getSitecodehash()
                        == other.getSitecodehash());
            }
            result = result && (hasStatus() == other.hasStatus());
            if (hasStatus()) {
                result = result && (getStatus()
                        == other.getStatus());
            }
            result = result && (hasCode() == other.hasCode());
            if (hasCode()) {
                result = result && (getCode()
                        == other.getCode());
            }
            result = result && (hasSdate() == other.hasSdate());
            if (hasSdate()) {
                result = result && (getSdate()
                        == other.getSdate());
            }
            result = result && (hasType() == other.hasType());
            if (hasType()) {
                result = result && (getType()
                        == other.getType());
            }
            result = result && (hasFree() == other.hasFree());
            if (hasFree()) {
                result = result && (getFree()
                        == other.getFree());
            }
            result = result && (hasClose() == other.hasClose());
            if (hasClose()) {
                result = result && (getClose()
                        == other.getClose());
            }
            result = result && (hasQueue() == other.hasQueue());
            if (hasQueue()) {
                result = result && (getQueue()
                        == other.getQueue());
            }
            result = result && (hasScantype() == other.hasScantype());
            if (hasScantype()) {
                result = result && (getScantype()
                        == other.getScantype());
            }
            result = result &&
                    getUnknownFields().equals(other.getUnknownFields());
            return result;
        }

        private int memoizedHashCode = 0;

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            if (hasMd5Urlhash()) {
                hash = (37 * hash) + MD5URLHASH_FIELD_NUMBER;
                hash = (53 * hash) + getMd5Urlhash();
            }
            if (hasSitecodehash()) {
                hash = (37 * hash) + SITECODEHASH_FIELD_NUMBER;
                hash = (53 * hash) + getSitecodehash();
            }
            if (hasStatus()) {
                hash = (37 * hash) + STATUS_FIELD_NUMBER;
                hash = (53 * hash) + getStatus();
            }
            if (hasCode()) {
                hash = (37 * hash) + CODE_FIELD_NUMBER;
                hash = (53 * hash) + getCode();
            }
            if (hasSdate()) {
                hash = (37 * hash) + SDATE_FIELD_NUMBER;
                hash = (53 * hash) + getSdate();
            }
            if (hasType()) {
                hash = (37 * hash) + TYPE_FIELD_NUMBER;
                hash = (53 * hash) + getType();
            }
            if (hasFree()) {
                hash = (37 * hash) + FREE_FIELD_NUMBER;
                hash = (53 * hash) + getFree();
            }
            if (hasClose()) {
                hash = (37 * hash) + CLOSE_FIELD_NUMBER;
                hash = (53 * hash) + getClose();
            }
            if (hasQueue()) {
                hash = (37 * hash) + QUEUE_FIELD_NUMBER;
                hash = (53 * hash) + getQueue();
            }
            if (hasScantype()) {
                hash = (37 * hash) + SCANTYPE_FIELD_NUMBER;
                hash = (53 * hash) + getScantype();
            }
            hash = (29 * hash) + getUnknownFields().hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code RowKeyBitComparator}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparatorOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.internal_static_RowKeyBitComparator_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.internal_static_RowKeyBitComparator_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.class, com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.Builder.class);
            }

            // Construct using com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                md5Urlhash_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                sitecodehash_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                status_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                code_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                sdate_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                type_ = 0;
                bitField0_ = (bitField0_ & ~0x00000020);
                free_ = 0;
                bitField0_ = (bitField0_ & ~0x00000040);
                close_ = 0;
                bitField0_ = (bitField0_ & ~0x00000080);
                queue_ = 0;
                bitField0_ = (bitField0_ & ~0x00000100);
                scantype_ = 0;
                bitField0_ = (bitField0_ & ~0x00000200);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.internal_static_RowKeyBitComparator_descriptor;
            }

            public com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator getDefaultInstanceForType() {
                return com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.getDefaultInstance();
            }

            public com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator build() {
                com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator buildPartial() {
                com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator result = new com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.md5Urlhash_ = md5Urlhash_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.sitecodehash_ = sitecodehash_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.status_ = status_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.code_ = code_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.sdate_ = sdate_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.type_ = type_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.free_ = free_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.close_ = close_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.queue_ = queue_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.scantype_ = scantype_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator) {
                    return mergeFrom((com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator other) {
                if (other == com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator.getDefaultInstance())
                    return this;
                if (other.hasMd5Urlhash()) {
                    setMd5Urlhash(other.getMd5Urlhash());
                }
                if (other.hasSitecodehash()) {
                    setSitecodehash(other.getSitecodehash());
                }
                if (other.hasStatus()) {
                    setStatus(other.getStatus());
                }
                if (other.hasCode()) {
                    setCode(other.getCode());
                }
                if (other.hasSdate()) {
                    setSdate(other.getSdate());
                }
                if (other.hasType()) {
                    setType(other.getType());
                }
                if (other.hasFree()) {
                    setFree(other.getFree());
                }
                if (other.hasClose()) {
                    setClose(other.getClose());
                }
                if (other.hasQueue()) {
                    setQueue(other.getQueue());
                }
                if (other.hasScantype()) {
                    setScantype(other.getScantype());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMd5Urlhash()) {

                    return false;
                }
                if (!hasSitecodehash()) {

                    return false;
                }
                if (!hasStatus()) {

                    return false;
                }
                if (!hasCode()) {

                    return false;
                }
                if (!hasSdate()) {

                    return false;
                }
                if (!hasType()) {

                    return false;
                }
                if (!hasFree()) {

                    return false;
                }
                if (!hasClose()) {

                    return false;
                }
                if (!hasQueue()) {

                    return false;
                }
                if (!hasScantype()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.study.hbase.bitcomparator.core.protos.RowKeyBitProtos.RowKeyBitComparator) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required fixed32 md5urlhash = 1;
            private int md5Urlhash_;

            /**
             * <code>required fixed32 md5urlhash = 1;</code>
             */
            public boolean hasMd5Urlhash() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required fixed32 md5urlhash = 1;</code>
             */
            public int getMd5Urlhash() {
                return md5Urlhash_;
            }

            /**
             * <code>required fixed32 md5urlhash = 1;</code>
             */
            public Builder setMd5Urlhash(int value) {
                bitField0_ |= 0x00000001;
                md5Urlhash_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 md5urlhash = 1;</code>
             */
            public Builder clearMd5Urlhash() {
                bitField0_ = (bitField0_ & ~0x00000001);
                md5Urlhash_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 sitecodehash = 2;
            private int sitecodehash_;

            /**
             * <code>required fixed32 sitecodehash = 2;</code>
             */
            public boolean hasSitecodehash() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required fixed32 sitecodehash = 2;</code>
             */
            public int getSitecodehash() {
                return sitecodehash_;
            }

            /**
             * <code>required fixed32 sitecodehash = 2;</code>
             */
            public Builder setSitecodehash(int value) {
                bitField0_ |= 0x00000002;
                sitecodehash_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 sitecodehash = 2;</code>
             */
            public Builder clearSitecodehash() {
                bitField0_ = (bitField0_ & ~0x00000002);
                sitecodehash_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 status = 3;
            private int status_;

            /**
             * <code>required fixed32 status = 3;</code>
             */
            public boolean hasStatus() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required fixed32 status = 3;</code>
             */
            public int getStatus() {
                return status_;
            }

            /**
             * <code>required fixed32 status = 3;</code>
             */
            public Builder setStatus(int value) {
                bitField0_ |= 0x00000004;
                status_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 status = 3;</code>
             */
            public Builder clearStatus() {
                bitField0_ = (bitField0_ & ~0x00000004);
                status_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 code = 4;
            private int code_;

            /**
             * <code>required fixed32 code = 4;</code>
             */
            public boolean hasCode() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required fixed32 code = 4;</code>
             */
            public int getCode() {
                return code_;
            }

            /**
             * <code>required fixed32 code = 4;</code>
             */
            public Builder setCode(int value) {
                bitField0_ |= 0x00000008;
                code_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 code = 4;</code>
             */
            public Builder clearCode() {
                bitField0_ = (bitField0_ & ~0x00000008);
                code_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 sdate = 5;
            private int sdate_;

            /**
             * <code>required fixed32 sdate = 5;</code>
             */
            public boolean hasSdate() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>required fixed32 sdate = 5;</code>
             */
            public int getSdate() {
                return sdate_;
            }

            /**
             * <code>required fixed32 sdate = 5;</code>
             */
            public Builder setSdate(int value) {
                bitField0_ |= 0x00000010;
                sdate_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 sdate = 5;</code>
             */
            public Builder clearSdate() {
                bitField0_ = (bitField0_ & ~0x00000010);
                sdate_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 type = 6;
            private int type_;

            /**
             * <code>required fixed32 type = 6;</code>
             */
            public boolean hasType() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>required fixed32 type = 6;</code>
             */
            public int getType() {
                return type_;
            }

            /**
             * <code>required fixed32 type = 6;</code>
             */
            public Builder setType(int value) {
                bitField0_ |= 0x00000020;
                type_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 type = 6;</code>
             */
            public Builder clearType() {
                bitField0_ = (bitField0_ & ~0x00000020);
                type_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 free = 7;
            private int free_;

            /**
             * <code>required fixed32 free = 7;</code>
             */
            public boolean hasFree() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required fixed32 free = 7;</code>
             */
            public int getFree() {
                return free_;
            }

            /**
             * <code>required fixed32 free = 7;</code>
             */
            public Builder setFree(int value) {
                bitField0_ |= 0x00000040;
                free_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 free = 7;</code>
             */
            public Builder clearFree() {
                bitField0_ = (bitField0_ & ~0x00000040);
                free_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 close = 8;
            private int close_;

            /**
             * <code>required fixed32 close = 8;</code>
             */
            public boolean hasClose() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>required fixed32 close = 8;</code>
             */
            public int getClose() {
                return close_;
            }

            /**
             * <code>required fixed32 close = 8;</code>
             */
            public Builder setClose(int value) {
                bitField0_ |= 0x00000080;
                close_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 close = 8;</code>
             */
            public Builder clearClose() {
                bitField0_ = (bitField0_ & ~0x00000080);
                close_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 queue = 9;
            private int queue_;

            /**
             * <code>required fixed32 queue = 9;</code>
             */
            public boolean hasQueue() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>required fixed32 queue = 9;</code>
             */
            public int getQueue() {
                return queue_;
            }

            /**
             * <code>required fixed32 queue = 9;</code>
             */
            public Builder setQueue(int value) {
                bitField0_ |= 0x00000100;
                queue_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 queue = 9;</code>
             */
            public Builder clearQueue() {
                bitField0_ = (bitField0_ & ~0x00000100);
                queue_ = 0;
                onChanged();
                return this;
            }

            // required fixed32 scantype = 10;
            private int scantype_;

            /**
             * <code>required fixed32 scantype = 10;</code>
             */
            public boolean hasScantype() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>required fixed32 scantype = 10;</code>
             */
            public int getScantype() {
                return scantype_;
            }

            /**
             * <code>required fixed32 scantype = 10;</code>
             */
            public Builder setScantype(int value) {
                bitField0_ |= 0x00000200;
                scantype_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required fixed32 scantype = 10;</code>
             */
            public Builder clearScantype() {
                bitField0_ = (bitField0_ & ~0x00000200);
                scantype_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:RowKeyBitComparator)
        }

        static {
            defaultInstance = new RowKeyBitComparator(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:RowKeyBitComparator)
    }

    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_RowKeyBitComparator_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_RowKeyBitComparator_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\025RowKeyBitProtos.proto\"\270\001\n\023RowKeyBitCom" +
                        "parator\022\022\n\nmd5urlhash\030\001 \002(\007\022\024\n\014sitecodeh" +
                        "ash\030\002 \002(\007\022\016\n\006status\030\003 \002(\007\022\014\n\004code\030\004 \002(\007\022" +
                        "\r\n\005sdate\030\005 \002(\007\022\014\n\004type\030\006 \002(\007\022\014\n\004free\030\007 \002" +
                        "(\007\022\r\n\005close\030\010 \002(\007\022\r\n\005queue\030\t \002(\007\022\020\n\010scan" +
                        "type\030\n \002(\007BD\n)com.study.hbase.bitcompara" +
                        "tor.core.protosB\017RowKeyBitProtosH\001\210\001\001\240\001\001"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_RowKeyBitComparator_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_RowKeyBitComparator_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_RowKeyBitComparator_descriptor,
                                new java.lang.String[]{"Md5Urlhash", "Sitecodehash", "Status", "Code", "Sdate", "Type", "Free", "Close", "Queue", "Scantype",});
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
